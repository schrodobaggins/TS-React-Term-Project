{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createStereoPannerNodeRendererFactory = function createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeStereoPannerNodes = new WeakMap();\n\n    var createStereoPannerNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeStereoPannerNode, nativeStereoPannerNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeStereoPannerNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n                 * again.\n                 */\n\n                nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n                if (!nativeStereoPannerNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                  };\n                  nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n                if (nativeStereoPannerNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n\n              case 11:\n                if (!isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 14;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n\n              case 14:\n                _context.next = 18;\n                break;\n\n              case 16:\n                _context.next = 18;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n\n              case 18:\n                return _context.abrupt(\"return\", nativeStereoPannerNode);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createStereoPannerNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/stereo-panner-node-renderer-factory.ts"],"names":[],"mappings":";;AAAA,SAAS,sBAAT,QAAuC,mCAAvC;AACA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAM,qCAAqC,GAA4C,SAAjF,qCAAiF,CAC1F,iBAD0F,EAE1F,4BAF0F,EAG1F,kBAH0F,EAI1F,gBAJ0F,EAK1F,uBAL0F,EAM1F;AACA,SAAO,YAAmE;AACtE,QAAM,+BAA+B,GAAG,IAAI,OAAJ,EAAxC;;AAEA,QAAM,sBAAsB;AAAA,0EAAG,iBAAO,KAAP,EAAoC,yBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACvB,gBAAA,sBADuB,GACE,kBAAkB,CAA6B,KAA7B,CADpB;AAG3B;;;AAGG;;AACG,gBAAA,sCAPqB,GAOoB,gBAAgB,CAAC,sBAAD,EAAyB,yBAAzB,CAPpC;;AAS3B,oBAAI,CAAC,sCAAL,EAA6C;AACnC,kBAAA,OADmC,GACzB;AACZ,oBAAA,YAAY,EAAE,sBAAsB,CAAC,YADzB;AAEZ,oBAAA,gBAAgB,EAAE,sBAAsB,CAAC,gBAF7B;AAGZ,oBAAA,qBAAqB,EAAE,sBAAsB,CAAC,qBAHlC;AAIZ,oBAAA,GAAG,EAAE,sBAAsB,CAAC,GAAvB,CAA2B;AAJpB,mBADyB;AAQzC,kBAAA,sBAAsB,GAAG,4BAA4B,CAAC,yBAAD,EAA4B,OAA5B,CAArD;AACH;;AAED,gBAAA,+BAA+B,CAAC,GAAhC,CAAoC,yBAApC,EAA+D,sBAA/D;;AApB2B,oBAsBtB,sCAtBsB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAuBjB,gBAAgB,CAAC,yBAAD,EAA4B,KAAK,CAAC,GAAlC,EAAuC,sBAAsB,CAAC,GAA9D,CAvBC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAyBjB,iBAAiB,CAAC,yBAAD,EAA4B,KAAK,CAAC,GAAlC,EAAuC,sBAAsB,CAAC,GAA9D,CAzBA;;AAAA;AAAA,qBA4BvB,sBAAsB,CAAC,sBAAD,CA5BC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA6BjB,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,sBAAsB,CAAC,MAAvB,CAA8B,CAA9B,CAAnC,CA7BN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBA+BjB,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,sBAAnC,CA/BN;;AAAA;AAAA,iDAkCpB,sBAlCoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAtB,sBAAsB;AAAA;AAAA;AAAA,OAA5B;;AAqCA,WAAO;AACH,MAAA,MADG,kBACI,KADJ,EACiC,yBADjC,EACsF;AACrF,YAAM,8BAA8B,GAAG,+BAA+B,CAAC,GAAhC,CAAoC,yBAApC,CAAvC;;AAEA,YAAI,8BAA8B,KAAK,SAAvC,EAAkD;AAC9C,iBAAO,OAAO,CAAC,OAAR,CAAgB,8BAAhB,CAAP;AACH;;AAED,eAAO,sBAAsB,CAAC,KAAD,EAAQ,yBAAR,CAA7B;AACH;AATE,KAAP;AAWH,GAnDD;AAoDH,CA3DM","sourceRoot":"","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeStereoPannerNodes = new WeakMap();\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            }\n            return nativeStereoPannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=stereo-panner-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}