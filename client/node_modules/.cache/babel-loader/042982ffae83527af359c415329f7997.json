{"ast":null,"code":"import _classCallCheck from\"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";// 3rd party library imports\n// project imports\nimport{Visualizer}from'../Visualizers';var particles=[];var Particle=/*#__PURE__*/function(){function Particle(p5){_classCallCheck(this,Particle);this.position=void 0;this.velocity=void 0;this.acc=void 0;this.w=void 0;this.color=void 0;this.position=Object.getPrototypeOf(p5).constructor.Vector.random2D().mult(250);this.velocity=p5.createVector(0,0);this.acc=this.position.copy().mult(p5.random(0.001,0.0001));this.w=p5.random(3,5);this.color=[p5.random(200,255),p5.random(200,255),p5.random(200,255)];}_createClass(Particle,[{key:\"update\",value:function update(){this.velocity.add(this.acc);this.position.add(this.velocity);}},{key:\"edges\",value:function edges(width,height){if(this.position.x<-width/2||this.position.x>width/2||this.position.y<-height/2||this.position.y>height/2){return true;}else{return false;}}},{key:\"show\",value:function show(p5){p5.noStroke();p5.fill(this.color);p5.ellipse(this.position.x,this.position.y,this.w);}}]);return Particle;}();export var mitchthebakerVisualizer=new Visualizer('mitchthebaker',function(p5,analyzer){var width=window.innerWidth/2;var height=window.innerHeight;p5.background(0);p5.stroke(255);p5.strokeWeight(3);p5.noFill();p5.translate(width/2,height/2);var wave=analyzer.getValue();for(var t=-1;t<=1;t+=2){p5.beginShape();// Use 180 since this is equal to the radius of a circle\nfor(var i=0;i<=180;i+=0.5){var index=Math.floor(p5.map(i,0,180,0,wave.length-1));//console.log(values[index]);\nvar r=p5.map(Number(wave[index]),-1,1,150,350);var x=r*p5.sin(i)*t;var y=r*p5.cos(i);p5.vertex(x,y);}p5.endShape();}var p=new Particle(p5);particles.push(p);for(var _i=particles.length-1;_i>=0;_i--){if(!particles[_i].edges(width,height)){particles[_i].update();particles[_i].show(p5);}else{particles.splice(_i,1);}}});","map":{"version":3,"sources":["/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/src/visualizers/mitchthebaker.tsx"],"names":["Visualizer","particles","Particle","p5","position","velocity","acc","w","color","Object","getPrototypeOf","constructor","Vector","random2D","mult","createVector","copy","random","add","width","height","x","y","noStroke","fill","ellipse","mitchthebakerVisualizer","analyzer","window","innerWidth","innerHeight","background","stroke","strokeWeight","noFill","translate","wave","getValue","t","beginShape","i","index","Math","floor","map","length","r","Number","sin","cos","vertex","endShape","p","push","edges","update","show","splice"],"mappings":"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","sourcesContent":["// 3rd party library imports\nimport P5 from 'p5';\nimport * as Tone from 'tone';\n\n// project imports\nimport { Visualizer } from '../Visualizers';\n\nconst particles: Particle[] = [];\n\nclass Particle {\n\n  public position;\n  public velocity;\n  public acc;\n  public w; \n  public color: any[];\n\n  constructor(p5: P5) {\n    this.position = Object.getPrototypeOf(p5).constructor.Vector.random2D().mult(250);\n    this.velocity = p5.createVector(0, 0);\n    this.acc = this.position.copy().mult(p5.random(0.001, 0.0001));\n    this.w = p5.random(3, 5);\n    this.color = [p5.random(200, 255), p5.random(200, 255), p5.random(200, 255)];\n  }\n\n  update(): void {\n    this.velocity.add(this.acc);\n    this.position.add(this.velocity);\n  }\n\n  edges(width: number, height: number): boolean {\n    if(this.position.x < -width / 2 || this.position.x > width / 2\n        || this.position.y < -height / 2 || this.position.y > height / 2) {\n          return true;\n        }\n    else {\n      return false;\n    }\n  }\n\n  show(p5: P5): void {\n    p5.noStroke()\n    p5.fill(this.color);\n    p5.ellipse(this.position.x, this.position.y, this.w);\n  }\n}\n\nexport const mitchthebakerVisualizer = new Visualizer(\n  'mitchthebaker',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth / 2;\n    const height = window.innerHeight;\n\n    p5.background(0);\n    p5.stroke(255);\n    p5.strokeWeight(3);\n    p5.noFill();\n    p5.translate(width / 2, height / 2);\n    \n    const wave = analyzer.getValue();\n\n    for(let t = -1; t <= 1; t += 2) {\n      p5.beginShape();\n\n      // Use 180 since this is equal to the radius of a circle\n      for(let i = 0; i <= 180; i += 0.5) {\n        let index = Math.floor(p5.map(i, 0, 180, 0, wave.length - 1));\n        //console.log(values[index]);\n\n        let r = p5.map(Number(wave[index]), -1, 1, 150, 350);\n\n        let x = r * p5.sin(i) * t;\n        let y = r * p5.cos(i);\n        p5.vertex(x, y);\n      }\n\n      p5.endShape();\n    }\n\n    let p: Particle = new Particle(p5);\n    particles.push(p);\n\n    for(let i = particles.length - 1; i >= 0; i--) {\n      if(!particles[i].edges(width, height)) {\n        particles[i].update();\n        particles[i].show(p5);\n      }\n      else {\n        particles.splice(i, 1);\n      }\n    }\n  },\n);\n"]},"metadata":{},"sourceType":"module"}