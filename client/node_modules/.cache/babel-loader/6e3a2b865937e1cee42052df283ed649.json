{"ast":null,"code":"// 3rd party library imports\n// project imports\nimport { Visualizer } from '../Visualizers';\nexport const KennethVisualizer = new Visualizer('kennethchuson2', (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight / 2;\n  const dim = Math.min(width, height);\n  let arr_colors = ['rgb(0,255,0)', 'rgb(195,4,4)', 'rgb(42,13,191)', 'rgba(0,234,242)'];\n  p5.background('#4F1B77');\n  p5.strokeWeight(dim * 0.03); //p5.stroke(255, 204, 100);\n  //p5.noFill();\n\n  for (let i = arr_colors.length - 1; i > 0; i--) {\n    let random = Math.floor(Math.random() * (i + 1));\n    let temp = arr_colors[i];\n    arr_colors[i] = arr_colors[random];\n    arr_colors[random] = temp;\n    p5.stroke(arr_colors[i]);\n  }\n\n  const values = analyzer.getValue();\n  p5.translate(width / 2, height / 2);\n  p5.beginShape();\n\n  for (let i = 0; i < values.length; i++) {\n    const r = values[i];\n    const x = r * Math.cos(i) * width / 1.150;\n    const y = r * Math.sin(i) * height / 1.150; // Place vertex\n\n    p5.point(x, y);\n  }\n\n  p5.endShape();\n});","map":{"version":3,"sources":["/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/src/visualizers/kennethchuson2.tsx"],"names":["Visualizer","KennethVisualizer","p5","analyzer","width","window","innerWidth","height","innerHeight","dim","Math","min","arr_colors","background","strokeWeight","i","length","random","floor","temp","stroke","values","getValue","translate","beginShape","r","x","cos","y","sin","point","endShape"],"mappings":"AAAA;AAIA;AACA,SAASA,UAAT,QAA2B,gBAA3B;AAEA,OAAO,MAAMC,iBAAiB,GAAG,IAAID,UAAJ,CAC/B,gBAD+B,EAE/B,CAACE,EAAD,EAASC,QAAT,KAAqC;AACnC,QAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,QAAMC,MAAM,GAAGF,MAAM,CAACG,WAAP,GAAqB,CAApC;AACA,QAAMC,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASP,KAAT,EAAgBG,MAAhB,CAAZ;AAEA,MAAIK,UAAmB,GAAG,CAAC,cAAD,EAAiB,cAAjB,EAAiC,gBAAjC,EAAmD,iBAAnD,CAA1B;AAEAV,EAAAA,EAAE,CAACW,UAAH,CAAc,SAAd;AAEAX,EAAAA,EAAE,CAACY,YAAH,CAAgBL,GAAG,GAAG,IAAtB,EATmC,CAUnC;AACA;;AAEA,OAAK,IAAIM,CAAC,GAAGH,UAAU,CAACI,MAAX,GAAoB,CAAjC,EAAoCD,CAAC,GAAG,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9C,QAAIE,MAAM,GAAGP,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACO,MAAL,MAAiBF,CAAC,GAAG,CAArB,CAAX,CAAb;AACA,QAAII,IAAI,GAAGP,UAAU,CAACG,CAAD,CAArB;AACAH,IAAAA,UAAU,CAACG,CAAD,CAAV,GAAgBH,UAAU,CAACK,MAAD,CAA1B;AACAL,IAAAA,UAAU,CAACK,MAAD,CAAV,GAAqBE,IAArB;AACAjB,IAAAA,EAAE,CAACkB,MAAH,CAAUR,UAAU,CAACG,CAAD,CAApB;AACD;;AAGD,QAAMM,MAAM,GAAGlB,QAAQ,CAACmB,QAAT,EAAf;AAGApB,EAAAA,EAAE,CAACqB,SAAH,CAAanB,KAAK,GAAG,CAArB,EAAwBG,MAAM,GAAG,CAAjC;AACAL,EAAAA,EAAE,CAACsB,UAAH;;AACA,OAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,MAAM,CAACL,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAMU,CAAC,GAAGJ,MAAM,CAACN,CAAD,CAAhB;AAEA,UAAMW,CAAC,GAAGD,CAAC,GAAGf,IAAI,CAACiB,GAAL,CAASZ,CAAT,CAAJ,GAAkBX,KAAlB,GAA0B,KAApC;AACA,UAAMwB,CAAC,GAAGH,CAAC,GAAGf,IAAI,CAACmB,GAAL,CAASd,CAAT,CAAJ,GAAkBR,MAAlB,GAA2B,KAArC,CAJsC,CAKtC;;AACAL,IAAAA,EAAE,CAAC4B,KAAH,CAASJ,CAAT,EAAYE,CAAZ;AACD;;AACD1B,EAAAA,EAAE,CAAC6B,QAAH;AACD,CAtC8B,CAA1B","sourcesContent":["// 3rd party library imports\nimport P5 from 'p5';\nimport * as Tone from 'tone';\n\n// project imports\nimport { Visualizer } from '../Visualizers';\n\nexport const KennethVisualizer = new Visualizer(\n  'kennethchuson2',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n    let arr_colors:string[] = ['rgb(0,255,0)', 'rgb(195,4,4)', 'rgb(42,13,191)', 'rgba(0,234,242)']\n\n    p5.background('#4F1B77');\n\n    p5.strokeWeight(dim * 0.03);\n    //p5.stroke(255, 204, 100);\n    //p5.noFill();\n\n    for (let i = arr_colors.length - 1; i > 0; i--) {\n      let random = Math.floor(Math.random() * (i + 1))\n      let temp = arr_colors[i] \n      arr_colors[i] = arr_colors[random]\n      arr_colors[random] = temp \n      p5.stroke(arr_colors[i])\n    }\n\n\n    const values = analyzer.getValue();\n\n\n    p5.translate(width / 2, height / 2) \n    p5.beginShape();\n    for (let i = 0; i < values.length; i++) {\n      const r = values[i] as number\n\n      const x = r * Math.cos(i) * width / 1.150\n      const y = r * Math.sin(i) * height / 1.150\n      // Place vertex\n      p5.point(x, y);\n    }\n    p5.endShape();\n  },\n);\n"]},"metadata":{},"sourceType":"module"}