{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return maxDelayTime => {\n    const renderedNativeDelayNodes = new WeakMap();\n\n    const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n      if (!nativeDelayNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeDelayNode.channelCount,\n          channelCountMode: nativeDelayNode.channelCountMode,\n          channelInterpretation: nativeDelayNode.channelInterpretation,\n          delayTime: nativeDelayNode.delayTime.value,\n          maxDelayTime\n        };\n        nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n      if (!nativeDelayNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n      return nativeDelayNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n\n        return createDelayNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/delay-node-renderer-factory.ts"],"names":[],"mappings":"AAAA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,MAAM,8BAA8B,GAAqC,CAC5E,iBAD4E,EAE5E,qBAF4E,EAG5E,kBAH4E,EAI5E,gBAJ4E,EAK5E,uBAL4E,KAM5E;AACA,SAAsE,YAA/D,IAAuF;AAC1F,UAAM,wBAAwB,GAAG,IAAI,OAAJ,EAAjC;;AAEA,UAAM,eAAe,GAAG,OAAO,KAAP,EAA6B,yBAA7B,KAAsF;AAC1G,UAAI,eAAe,GAAG,kBAAkB,CAAsB,KAAtB,CAAxC,CAD0G,CAG1G;;AACA,YAAM,+BAA+B,GAAG,gBAAgB,CAAC,eAAD,EAAkB,yBAAlB,CAAxD;;AAEA,UAAI,CAAC,+BAAL,EAAsC;AAClC,cAAM,OAAO,GAAG;AACZ,UAAA,YAAY,EAAE,eAAe,CAAC,YADlB;AAEZ,UAAA,gBAAgB,EAAE,eAAe,CAAC,gBAFtB;AAGZ,UAAA,qBAAqB,EAAE,eAAe,CAAC,qBAH3B;AAIZ,UAAA,SAAS,EAAE,eAAe,CAAC,SAAhB,CAA0B,KAJzB;AAKZ,UAAA;AALY,SAAhB;AAQA,QAAA,eAAe,GAAG,qBAAqB,CAAC,yBAAD,EAA4B,OAA5B,CAAvC;AACH;;AAED,MAAA,wBAAwB,CAAC,GAAzB,CAA6B,yBAA7B,EAAwD,eAAxD;;AAEA,UAAI,CAAC,+BAAL,EAAsC;AAClC,cAAM,gBAAgB,CAAC,yBAAD,EAA4B,KAAK,CAAC,SAAlC,EAA6C,eAAe,CAAC,SAA7D,CAAtB;AACH,OAFD,MAEO;AACH,cAAM,iBAAiB,CAAC,yBAAD,EAA4B,KAAK,CAAC,SAAlC,EAA6C,eAAe,CAAC,SAA7D,CAAvB;AACH;;AAED,YAAM,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,eAAnC,CAA7B;AAEA,aAAO,eAAP;AACH,KA7BD;;AA+BA,WAAO;AACH,MAAA,MAAM,CAAC,KAAD,EAAuB,yBAAvB,EAA4E;AAC9E,cAAM,uBAAuB,GAAG,wBAAwB,CAAC,GAAzB,CAA6B,yBAA7B,CAAhC;;AAEA,YAAI,uBAAuB,KAAK,SAAhC,EAA2C;AACvC,iBAAO,OAAO,CAAC,OAAR,CAAgB,uBAAhB,CAAP;AACH;;AAED,eAAO,eAAe,CAAC,KAAD,EAAQ,yBAAR,CAAtB;AACH;;AATE,KAAP;AAWH,GA7CD;AA8CH,CArDM","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=delay-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}