{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createOscillatorNodeRendererFactory = function createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeOscillatorNodes = new WeakMap();\n    var periodicWave = null;\n    var start = null;\n    var stop = null;\n\n    var createOscillatorNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeOscillatorNode, nativeOscillatorNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n                if (!nativeOscillatorNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                  };\n                  nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n                  if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                  }\n\n                  if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                  }\n                }\n\n                renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n                if (nativeOscillatorNodeIsOwnedByContext) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n\n              case 7:\n                _context.next = 9;\n                return renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n\n              case 9:\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.next = 13;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n\n              case 13:\n                _context.next = 15;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n\n              case 15:\n                _context.next = 17;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n\n              case 17:\n                return _context.abrupt(\"return\", nativeOscillatorNode);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createOscillatorNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n\n        return createOscillatorNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/oscillator-node-renderer-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeOscillatorNodes = new WeakMap();\n        let periodicWave = null;\n        let start = null;\n        let stop = null;\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n            return nativeOscillatorNode;\n        };\n        return {\n            set periodicWave(value) {\n                periodicWave = value;\n            },\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=oscillator-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}