{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n      if (!nativeAudioNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAudioNode.channelCount,\n          channelCountMode: nativeAudioNode.channelCountMode,\n          channelInterpretation: nativeAudioNode.channelInterpretation,\n          numberOfOutputs: nativeAudioNode.numberOfOutputs\n        };\n        nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n      return nativeAudioNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/channel-splitter-node-renderer-factory.ts"],"names":[],"mappings":"AAAA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,MAAM,wCAAwC,GAA+C,CAChG,+BADgG,EAEhG,kBAFgG,EAGhG,uBAHgG,KAIhG;AACA,SAAO,MAAmE;AACtE,UAAM,wBAAwB,GAAG,IAAI,OAAJ,EAAjC;;AAEA,UAAM,eAAe,GAAG,OAAO,KAAP,EAA6B,yBAA7B,KAAsF;AAC1G,UAAI,eAAe,GAAG,kBAAkB,CAAsB,KAAtB,CAAxC,CAD0G,CAG1G;;AACA,YAAM,+BAA+B,GAAG,gBAAgB,CAAC,eAAD,EAAkB,yBAAlB,CAAxD;;AAEA,UAAI,CAAC,+BAAL,EAAsC;AAClC,cAAM,OAAO,GAAG;AACZ,UAAA,YAAY,EAAE,eAAe,CAAC,YADlB;AAEZ,UAAA,gBAAgB,EAAE,eAAe,CAAC,gBAFtB;AAGZ,UAAA,qBAAqB,EAAE,eAAe,CAAC,qBAH3B;AAIZ,UAAA,eAAe,EAAE,eAAe,CAAC;AAJrB,SAAhB;AAOA,QAAA,eAAe,GAAG,+BAA+B,CAAC,yBAAD,EAA4B,OAA5B,CAAjD;AACH;;AAED,MAAA,wBAAwB,CAAC,GAAzB,CAA6B,yBAA7B,EAAwD,eAAxD;AAEA,YAAM,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,eAAnC,CAA7B;AAEA,aAAO,eAAP;AACH,KAtBD;;AAwBA,WAAO;AACH,MAAA,MAAM,CAAC,KAAD,EAAuB,yBAAvB,EAA4E;AAC9E,cAAM,uBAAuB,GAAG,wBAAwB,CAAC,GAAzB,CAA6B,yBAA7B,CAAhC;;AAEA,YAAI,uBAAuB,KAAK,SAAhC,EAA2C;AACvC,iBAAO,OAAO,CAAC,OAAR,CAAgB,uBAAhB,CAAP;AACH;;AAED,eAAO,eAAe,CAAC,KAAD,EAAQ,yBAAR,CAAtB;AACH;;AATE,KAAP;AAWH,GAtCD;AAuCH,CA5CM","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfOutputs: nativeAudioNode.numberOfOutputs\n                };\n                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=channel-splitter-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}