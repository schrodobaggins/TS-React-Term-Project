{"ast":null,"code":"export const createAudioDestinationNodeRenderer = renderInputsOfAudioNode => {\n  const renderedNativeAudioDestinationNodes = new WeakMap();\n\n  const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n    renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n    await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n    return nativeAudioDestinationNode;\n  };\n\n  return {\n    render(proxy, nativeOfflineAudioContext) {\n      const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n\n      if (renderedNativeAudioDestinationNode !== undefined) {\n        return Promise.resolve(renderedNativeAudioDestinationNode);\n      }\n\n      return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n    }\n\n  };\n};","map":{"version":3,"sources":["../../../src/factories/audio-destination-node-renderer-factory.ts"],"names":[],"mappings":"AAQA,OAAO,MAAM,kCAAkC,GAG3C,uBAHoF,IAIpF;AACA,QAAM,mCAAmC,GAAG,IAAI,OAAJ,EAA5C;;AAEA,QAAM,0BAA0B,GAAG,OAAO,KAAP,EAAwC,yBAAxC,KAAiG;AAChI,UAAM,0BAA0B,GAAG,yBAAyB,CAAC,WAA7D;AAEA,IAAA,mCAAmC,CAAC,GAApC,CAAwC,yBAAxC,EAAmE,0BAAnE;AAEA,UAAM,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,0BAAnC,CAA7B;AAEA,WAAO,0BAAP;AACH,GARD;;AAUA,SAAO;AACH,IAAA,MAAM,CACF,KADE,EAEF,yBAFE,EAEmD;AAErD,YAAM,kCAAkC,GAAG,mCAAmC,CAAC,GAApC,CAAwC,yBAAxC,CAA3C;;AAEA,UAAI,kCAAkC,KAAK,SAA3C,EAAsD;AAClD,eAAO,OAAO,CAAC,OAAR,CAAgB,kCAAhB,CAAP;AACH;;AAED,aAAO,0BAA0B,CAAC,KAAD,EAAQ,yBAAR,CAAjC;AACH;;AAZE,GAAP;AAcH,CA/BM","sourceRoot":"","sourcesContent":["export const createAudioDestinationNodeRenderer = (renderInputsOfAudioNode) => {\n    const renderedNativeAudioDestinationNodes = new WeakMap();\n    const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n        renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n        return nativeAudioDestinationNode;\n    };\n    return {\n        render(proxy, nativeOfflineAudioContext) {\n            const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeAudioDestinationNode !== undefined) {\n                return Promise.resolve(renderedNativeAudioDestinationNode);\n            }\n            return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n        }\n    };\n};\n//# sourceMappingURL=audio-destination-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}