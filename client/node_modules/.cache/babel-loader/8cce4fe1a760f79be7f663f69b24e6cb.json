{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createDelayNodeRendererFactory = function createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function (maxDelayTime) {\n    var renderedNativeDelayNodes = new WeakMap();\n\n    var createDelayNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeDelayNode, nativeDelayNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n                if (!nativeDelayNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime: maxDelayTime\n                  };\n                  nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n                if (nativeDelayNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n\n              case 11:\n                _context.next = 13;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n\n              case 13:\n                return _context.abrupt(\"return\", nativeDelayNode);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createDelayNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n\n        return createDelayNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/delay-node-renderer-factory.ts"],"names":[],"mappings":";;AAAA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAM,8BAA8B,GAAqC,SAAnE,8BAAmE,CAC5E,iBAD4E,EAE5E,qBAF4E,EAG5E,kBAH4E,EAI5E,gBAJ4E,EAK5E,uBAL4E,EAM5E;AACA,SAAO,UAA+D,YAA/D,EAAuF;AAC1F,QAAM,wBAAwB,GAAG,IAAI,OAAJ,EAAjC;;AAEA,QAAM,eAAe;AAAA,0EAAG,iBAAO,KAAP,EAA6B,yBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB,gBAAA,eADgB,GACE,kBAAkB,CAAsB,KAAtB,CADpB,EAGpB;;AACM,gBAAA,+BAJc,GAIoB,gBAAgB,CAAC,eAAD,EAAkB,yBAAlB,CAJpC;;AAMpB,oBAAI,CAAC,+BAAL,EAAsC;AAC5B,kBAAA,OAD4B,GAClB;AACZ,oBAAA,YAAY,EAAE,eAAe,CAAC,YADlB;AAEZ,oBAAA,gBAAgB,EAAE,eAAe,CAAC,gBAFtB;AAGZ,oBAAA,qBAAqB,EAAE,eAAe,CAAC,qBAH3B;AAIZ,oBAAA,SAAS,EAAE,eAAe,CAAC,SAAhB,CAA0B,KAJzB;AAKZ,oBAAA,YAAY,EAAZ;AALY,mBADkB;AASlC,kBAAA,eAAe,GAAG,qBAAqB,CAAC,yBAAD,EAA4B,OAA5B,CAAvC;AACH;;AAED,gBAAA,wBAAwB,CAAC,GAAzB,CAA6B,yBAA7B,EAAwD,eAAxD;;AAlBoB,oBAoBf,+BApBe;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAqBV,gBAAgB,CAAC,yBAAD,EAA4B,KAAK,CAAC,SAAlC,EAA6C,eAAe,CAAC,SAA7D,CArBN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAuBV,iBAAiB,CAAC,yBAAD,EAA4B,KAAK,CAAC,SAAlC,EAA6C,eAAe,CAAC,SAA7D,CAvBP;;AAAA;AAAA;AAAA,uBA0Bd,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,eAAnC,CA1BT;;AAAA;AAAA,iDA4Bb,eA5Ba;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAf,eAAe;AAAA;AAAA;AAAA,OAArB;;AA+BA,WAAO;AACH,MAAA,MADG,kBACI,KADJ,EAC0B,yBAD1B,EAC+E;AAC9E,YAAM,uBAAuB,GAAG,wBAAwB,CAAC,GAAzB,CAA6B,yBAA7B,CAAhC;;AAEA,YAAI,uBAAuB,KAAK,SAAhC,EAA2C;AACvC,iBAAO,OAAO,CAAC,OAAR,CAAgB,uBAAhB,CAAP;AACH;;AAED,eAAO,eAAe,CAAC,KAAD,EAAQ,yBAAR,CAAtB;AACH;AATE,KAAP;AAWH,GA7CD;AA8CH,CArDM","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=delay-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}