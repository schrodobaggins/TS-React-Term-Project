{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createDynamicsCompressorNodeRendererFactory = function createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeDynamicsCompressorNodes = new WeakMap();\n\n    var createDynamicsCompressorNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeDynamicsCompressorNode, nativeDynamicsCompressorNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n                 * created again.\n                 */\n\n                nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n                if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                  options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                  };\n                  nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n                if (nativeDynamicsCompressorNodeIsOwnedByContext) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n\n              case 7:\n                _context.next = 9;\n                return renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n\n              case 9:\n                _context.next = 11;\n                return renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n\n              case 11:\n                _context.next = 13;\n                return renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n\n              case 13:\n                _context.next = 15;\n                return renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n\n              case 15:\n                _context.next = 27;\n                break;\n\n              case 17:\n                _context.next = 19;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n\n              case 19:\n                _context.next = 21;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n\n              case 21:\n                _context.next = 23;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n\n              case 23:\n                _context.next = 25;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n\n              case 25:\n                _context.next = 27;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n\n              case 27:\n                _context.next = 29;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n              case 29:\n                return _context.abrupt(\"return\", nativeDynamicsCompressorNode);\n\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createDynamicsCompressorNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/dynamics-compressor-node-renderer-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=dynamics-compressor-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}