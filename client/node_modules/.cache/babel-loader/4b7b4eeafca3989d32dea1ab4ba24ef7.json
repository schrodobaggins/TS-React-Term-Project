{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createChannelMergerNodeRendererFactory = function createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAudioNodes = new WeakMap();\n\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeAudioNode, nativeAudioNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n                if (!nativeAudioNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                  };\n                  nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n                _context.next = 6;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n\n              case 6:\n                return _context.abrupt(\"return\", nativeAudioNode);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createAudioNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/channel-merger-node-renderer-factory.ts"],"names":[],"mappings":";;AAAA,SAAS,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAM,sCAAsC,GAA6C,SAAnF,sCAAmF,CAC5F,6BAD4F,EAE5F,kBAF4F,EAG5F,uBAH4F,EAI5F;AACA,SAAO,YAAmE;AACtE,QAAM,wBAAwB,GAAG,IAAI,OAAJ,EAAjC;;AAEA,QAAM,eAAe;AAAA,0EAAG,iBAAO,KAAP,EAA6B,yBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB,gBAAA,eADgB,GACE,kBAAkB,CAAsB,KAAtB,CADpB,EAGpB;;AACM,gBAAA,+BAJc,GAIoB,gBAAgB,CAAC,eAAD,EAAkB,yBAAlB,CAJpC;;AAMpB,oBAAI,CAAC,+BAAL,EAAsC;AAC5B,kBAAA,OAD4B,GAClB;AACZ,oBAAA,YAAY,EAAE,eAAe,CAAC,YADlB;AAEZ,oBAAA,gBAAgB,EAAE,eAAe,CAAC,gBAFtB;AAGZ,oBAAA,qBAAqB,EAAE,eAAe,CAAC,qBAH3B;AAIZ,oBAAA,cAAc,EAAE,eAAe,CAAC;AAJpB,mBADkB;AAQlC,kBAAA,eAAe,GAAG,6BAA6B,CAAC,yBAAD,EAA4B,OAA5B,CAA/C;AACH;;AAED,gBAAA,wBAAwB,CAAC,GAAzB,CAA6B,yBAA7B,EAAwD,eAAxD;AAjBoB;AAAA,uBAmBd,uBAAuB,CAAC,KAAD,EAAQ,yBAAR,EAAmC,eAAnC,CAnBT;;AAAA;AAAA,iDAqBb,eArBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAf,eAAe;AAAA;AAAA;AAAA,OAArB;;AAwBA,WAAO;AACH,MAAA,MADG,kBACI,KADJ,EAC0B,yBAD1B,EAC+E;AAC9E,YAAM,uBAAuB,GAAG,wBAAwB,CAAC,GAAzB,CAA6B,yBAA7B,CAAhC;;AAEA,YAAI,uBAAuB,KAAK,SAAhC,EAA2C;AACvC,iBAAO,OAAO,CAAC,OAAR,CAAgB,uBAAhB,CAAP;AACH;;AAED,eAAO,eAAe,CAAC,KAAD,EAAQ,yBAAR,CAAtB;AACH;AATE,KAAP;AAWH,GAtCD;AAuCH,CA5CM","sourceRoot":"","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=channel-merger-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}