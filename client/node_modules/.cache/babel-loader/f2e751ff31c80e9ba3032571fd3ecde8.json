{"ast":null,"code":"// 3rd party library imports\n// project imports\nimport { Visualizer } from '../Visualizers';\nconst particles = [];\n\nclass Particle {\n  constructor(p5) {\n    this.position = void 0;\n    this.velocity = void 0;\n    this.acc = void 0;\n    this.w = void 0;\n    this.color = void 0;\n    this.position = Object.getPrototypeOf(p5).constructor.Vector.random2D().mult(250);\n    this.velocity = p5.createVector(0, 0);\n    this.acc = this.position.copy().mult(p5.random(0.001, 0.0001));\n    this.w = p5.random(3, 5);\n    this.color = [p5.random(200, 255), p5.random(200, 255), p5.random(200, 255)];\n  }\n\n  update() {\n    this.velocity.add(this.acc);\n    this.position.add(this.velocity);\n  }\n\n  edges(width, height) {\n    if (this.position.x < -width / 2 || this.position.x > width / 2 || this.position.y < -height / 2 || this.position.y > height / 2) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  show(p5) {\n    p5.noStroke();\n    p5.fill(this.color);\n    p5.ellipse(this.position.x, this.position.y, this.w);\n  }\n\n}\n\nexport const mitchthebakerVisualizer = new Visualizer('mitchthebaker', (p5, analyzer) => {\n  const width = window.innerWidth / 2;\n  const height = window.innerHeight;\n  p5.background(0);\n  p5.stroke(255);\n  p5.strokeWeight(3);\n  p5.noFill();\n  p5.translate(width / 2, height / 2);\n  const wave = analyzer.getValue();\n\n  for (let t = -1; t <= 1; t += 2) {\n    p5.beginShape(); // Use 180 since this is equal to the radius of a circle\n\n    for (let i = 0; i <= 180; i += 0.5) {\n      let index = Math.floor(p5.map(i, 0, 180, 0, wave.length - 1)); //console.log(values[index]);\n\n      let r = p5.map(Number(wave[index]), -1, 1, 150, 350);\n      let x = r * p5.sin(i) * t;\n      let y = r * p5.cos(i);\n      p5.vertex(x, y);\n    }\n\n    p5.endShape();\n  }\n\n  let p = new Particle(p5);\n  particles.push(p);\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    if (!particles[i].edges(width, height)) {\n      particles[i].update();\n      particles[i].show(p5);\n    } else {\n      particles.splice(i, 1);\n    }\n  }\n});","map":{"version":3,"sources":["/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/src/visualizers/mitchthebaker.tsx"],"names":["Visualizer","particles","Particle","constructor","p5","position","velocity","acc","w","color","Object","getPrototypeOf","Vector","random2D","mult","createVector","copy","random","update","add","edges","width","height","x","y","show","noStroke","fill","ellipse","mitchthebakerVisualizer","analyzer","window","innerWidth","innerHeight","background","stroke","strokeWeight","noFill","translate","wave","getValue","t","beginShape","i","index","Math","floor","map","length","r","Number","sin","cos","vertex","endShape","p","push","splice"],"mappings":"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","sourcesContent":["// 3rd party library imports\nimport P5 from 'p5';\nimport * as Tone from 'tone';\n\n// project imports\nimport { Visualizer } from '../Visualizers';\n\nconst particles: Particle[] = [];\n\nclass Particle {\n\n  public position;\n  public velocity;\n  public acc;\n  public w; \n  public color: any[];\n\n  constructor(p5: P5) {\n    this.position = Object.getPrototypeOf(p5).constructor.Vector.random2D().mult(250);\n    this.velocity = p5.createVector(0, 0);\n    this.acc = this.position.copy().mult(p5.random(0.001, 0.0001));\n    this.w = p5.random(3, 5);\n    this.color = [p5.random(200, 255), p5.random(200, 255), p5.random(200, 255)];\n  }\n\n  update(): void {\n    this.velocity.add(this.acc);\n    this.position.add(this.velocity);\n  }\n\n  edges(width: number, height: number): boolean {\n    if(this.position.x < -width / 2 || this.position.x > width / 2\n        || this.position.y < -height / 2 || this.position.y > height / 2) {\n          return true;\n        }\n    else {\n      return false;\n    }\n  }\n\n  show(p5: P5): void {\n    p5.noStroke()\n    p5.fill(this.color);\n    p5.ellipse(this.position.x, this.position.y, this.w);\n  }\n}\n\nexport const mitchthebakerVisualizer = new Visualizer(\n  'mitchthebaker',\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth / 2;\n    const height = window.innerHeight;\n\n    p5.background(0);\n    p5.stroke(255);\n    p5.strokeWeight(3);\n    p5.noFill();\n    p5.translate(width / 2, height / 2);\n    \n    const wave = analyzer.getValue();\n\n    for(let t = -1; t <= 1; t += 2) {\n      p5.beginShape();\n\n      // Use 180 since this is equal to the radius of a circle\n      for(let i = 0; i <= 180; i += 0.5) {\n        let index = Math.floor(p5.map(i, 0, 180, 0, wave.length - 1));\n        //console.log(values[index]);\n\n        let r = p5.map(Number(wave[index]), -1, 1, 150, 350);\n\n        let x = r * p5.sin(i) * t;\n        let y = r * p5.cos(i);\n        p5.vertex(x, y);\n      }\n\n      p5.endShape();\n    }\n\n    let p: Particle = new Particle(p5);\n    particles.push(p);\n\n    for(let i = particles.length - 1; i >= 0; i--) {\n      if(!particles[i].edges(width, height)) {\n        particles[i].update();\n        particles[i].show(p5);\n      }\n      else {\n        particles.splice(i, 1);\n      }\n    }\n  },\n);\n"]},"metadata":{},"sourceType":"module"}