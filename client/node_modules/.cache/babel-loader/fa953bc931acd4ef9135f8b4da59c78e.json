{"ast":null,"code":"import { DispatchAction } from '../Reducer';\nimport axios from 'axios';\nexport const getSongs = async dispatch => {\n  try {\n    const res = await axios.get('/api/songs', {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (res.status === 200) {\n      dispatch(new DispatchAction('SET_SONGS', {\n        songs: res.data.songs\n      }));\n    }\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getSong = async (dispatch, songTitle) => {\n  try {\n    const res = await axios.get(`/api/songs/${songTitle}`, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (res.status === 200) {\n      dispatch(new DispatchAction('SET_SONGS', {\n        songs: res.data.songs\n      }));\n    }\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const updateSong = async (dispatch, newTitle, songId) => {\n  try {\n    const res = await axios.put(`/api/songs/${songId}`, null, {\n      params: {\n        newTitle: newTitle\n      }\n    });\n\n    if (res.status === 200) {\n      await getSongs(dispatch);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addSong = async (dispatch, songTitle, song) => {\n  try {\n    const body = {\n      song_title: songTitle,\n      song: song\n    };\n    const res = await axios.post('/api/songs', body, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }); // successful creation of new song\n\n    if (res.status === 201) {\n      await getSongs(dispatch);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteSong = async (dispatch, songId) => {\n  try {\n    const res = await axios.delete(`/api/songs/${songId}`);\n\n    if (res.status === 200) {\n      await getSongs(dispatch);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/src/utils/apiCreators.ts"],"names":["DispatchAction","axios","getSongs","dispatch","res","get","headers","status","songs","data","err","console","error","getSong","songTitle","updateSong","newTitle","songId","put","params","addSong","song","body","song_title","post","deleteSong","delete"],"mappings":"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","sourcesContent":["import { DispatchAction } from '../Reducer';\nimport axios from 'axios';\nimport React from 'react';\n\nexport const getSongs = async (dispatch: React.Dispatch<DispatchAction>) => {\n    try {\n        const res = await axios.get('/api/songs', {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });    \n\n        if(res.status === 200) {\n            dispatch(new DispatchAction('SET_SONGS', { songs: res.data.songs }));\n        }\n    }\n    catch(err) {\n        console.error(err);\n    }\n};\n\nexport const getSong = async (dispatch: React.Dispatch<DispatchAction>,\n                              songTitle: string) => {\n    try {\n        const res = await axios.get(`/api/songs/${songTitle}`, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n      \n        if(res.status === 200) {\n            dispatch(new DispatchAction('SET_SONGS', { songs: res.data.songs }));\n        }\n    }\n    catch(err) {\n      console.error(err);\n    }\n};\n\nexport const updateSong = async(dispatch: React.Dispatch<DispatchAction>,\n                                newTitle: string,\n                                songId: number) => {\n    try {\n        const res = await axios.put(`/api/songs/${songId}`, null, { params: { newTitle: newTitle } });\n\n        if(res.status === 200) {\n            await getSongs(dispatch);\n        }\n    }\n    catch(err) {\n        console.error(err);\n    }\n};\n\nexport const addSong = async (dispatch: React.Dispatch<DispatchAction>, \n                              songTitle: string, \n                              song: string[]) => {\n    try {\n        const body = {\n            song_title: songTitle,\n            song: song,  \n        };\n\n        const res = await axios.post('/api/songs', body, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        \n        // successful creation of new song\n        if(res.status === 201) {\n            await getSongs(dispatch);\n        }\n    }\n    catch(err) {\n        console.error(err);\n    }\n};\n\nexport const deleteSong = async(dispatch: React.Dispatch<DispatchAction>,\n                                songId: number) => {\n    try {\n        const res = await axios.delete(`/api/songs/${songId}`);\n\n        if(res.status === 200) {\n        await getSongs(dispatch);\n        }\n    }\n    catch(err) {\n        console.error(err);\n    }\n};"]},"metadata":{},"sourceType":"module"}