{"ast":null,"code":"import _toConsumableArray from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/michaelschroeder/Documents/GitHub/final-project-symphony-quadtuplets/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var createRenderInputsOfAudioNode = function createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(audioNode, nativeOfflineAudioContext, nativeAudioNode) {\n      var audioNodeConnections;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              audioNodeConnections = getAudioNodeConnections(audioNode);\n              _context2.next = 3;\n              return Promise.all(audioNodeConnections.activeInputs.map(function (connections, input) {\n                return Array.from(connections).map( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n                    var _ref4, source, output, audioNodeRenderer, renderedNativeAudioNode, destination;\n\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _ref4 = _slicedToArray(_ref2, 2), source = _ref4[0], output = _ref4[1];\n                            audioNodeRenderer = getAudioNodeRenderer(source);\n                            _context.next = 4;\n                            return audioNodeRenderer.render(source, nativeOfflineAudioContext);\n\n                          case 4:\n                            renderedNativeAudioNode = _context.sent;\n                            destination = audioNode.context.destination;\n\n                            if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n                              renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n                            }\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x4) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n              }).reduce(function (allRenderingPromises, renderingPromises) {\n                return [].concat(_toConsumableArray(allRenderingPromises), _toConsumableArray(renderingPromises));\n              }, []));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["../../../src/factories/render-inputs-of-audio-node.ts"],"names":[],"mappings":";;;;AAGA,OAAO,IAAM,6BAA6B,GAAoC,SAAjE,6BAAiE,CAC1E,uBAD0E,EAE1E,oBAF0E,EAG1E,cAH0E,EAI1E;AACA;AAAA,wEAAO,kBAAO,SAAP,EAAkB,yBAAlB,EAA6C,eAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,cAAA,oBADH,GAC0B,uBAAuB,CAAC,SAAD,CADjD;AAAA;AAAA,qBAGG,OAAO,CAAC,GAAR,CACF,oBAAoB,CAAC,YAArB,CACK,GADL,CACS,UAAC,WAAD,EAAc,KAAd;AAAA,uBACD,KAAK,CAAC,IAAN,CAAW,WAAX,EAAwB,GAAxB;AAAA,uFAA4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8DAAQ,MAAR,aAAgB,MAAhB;AAClB,4BAAA,iBADkB,GACE,oBAAoB,CAAC,MAAD,CADtB;AAAA;AAAA,mCAEc,iBAAiB,CAAC,MAAlB,CAAyB,MAAzB,EAAiC,yBAAjC,CAFd;;AAAA;AAElB,4BAAA,uBAFkB;AAGlB,4BAAA,WAHkB,GAG6C,SAAS,CAAC,OAAV,CAAkB,WAH/D;;AAKxB,gCAAI,CAAC,cAAc,CAAC,MAAD,CAAf,KAA4B,SAAS,KAAK,WAAd,IAA6B,CAAC,cAAc,CAAC,SAAD,CAAxE,CAAJ,EAA0F;AACtF,8BAAA,uBAAuB,CAAC,OAAxB,CAAgC,eAAhC,EAAiD,MAAjD,EAAyD,KAAzD;AACH;;AAPuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA5B;;AAAA;AAAA;AAAA;AAAA,oBADC;AAAA,eADT,EAYK,MAZL,CAYY,UAAC,oBAAD,EAAuB,iBAAvB;AAAA,oDAAiD,oBAAjD,sBAA0E,iBAA1E;AAAA,eAZZ,EAY0G,EAZ1G,CADE,CAHH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAmBH,CAxBM","sourceRoot":"","sourcesContent":["export const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\n    return async (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n        await Promise.all(audioNodeConnections.activeInputs\n            .map((connections, input) => Array.from(connections).map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n            const destination = audioNode.context.destination;\n            if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n                renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n            }\n        }))\n            .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n    };\n};\n//# sourceMappingURL=render-inputs-of-audio-node.js.map"]},"metadata":{},"sourceType":"module"}